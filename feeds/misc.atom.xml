<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>pydata</title><link href="/" rel="alternate"></link><link href="/feeds/misc.atom.xml" rel="self"></link><id>/</id><updated>2015-09-26T00:00:00-05:00</updated><entry><title>Set up data/code between host/guest/dropbox</title><link href="/pages/2015/09/26/set-up-datacode-between-hostguestdropbox/" rel="alternate"></link><updated>2015-09-26T00:00:00-05:00</updated><author><name>Huiming Song</name></author><id>tag:,2015-09-26:pages/2015/09/26/set-up-datacode-between-hostguestdropbox/</id><summary type="html">&lt;h2&gt;share folders between host and vmware guest machine&lt;/h2&gt;
&lt;p&gt;This will refer to &lt;a href="http://songhuiming.github.io/pages/2015/09/26/share-folders-in-windows-with-vmware-guest-ubuntu/"&gt;share folders in windows with vmware guest ubuntu&lt;/a&gt; &lt;/p&gt;
&lt;h2&gt;plan:&lt;/h2&gt;
&lt;p&gt;1: data will be saved in E:\kaggle_data folder, this folder will be shared with guest machine. so it does not need to download data in ubuntu machine.&lt;/p&gt;
&lt;p&gt;2: code can be saved on the same place. but to share with the other machine, it is better to save in dropbox. so they are saved in Dropbox/kaggle_code/&lt;/p&gt;</summary><category term="linux"></category></entry><entry><title>share folders in windows with vmware guest ubuntu</title><link href="/pages/2015/09/26/share-folders-in-windows-with-vmware-guest-ubuntu/" rel="alternate"></link><updated>2015-09-26T00:00:00-05:00</updated><author><name>Huiming Song</name></author><id>tag:,2015-09-26:pages/2015/09/26/share-folders-in-windows-with-vmware-guest-ubuntu/</id><summary type="html">&lt;h2&gt;虚拟机跟主机共享文件夹&lt;/h2&gt;
&lt;p&gt;主机是win7，虚拟机是vmware，上面装的ubuntu 14. 刚开始的时候给ubuntu分配的硬盘小了，所以这时候只能做两件事：一是给虚拟机增加磁盘空间，这个回头再说；二就是虚拟机跟主机共享文件夹，这样文件存放在主机上，虚拟机也可以用。这比第一种方法节省空间。&lt;/p&gt;
&lt;h3&gt;步骤&lt;/h3&gt;
&lt;p&gt;1: 首先在虚拟机点击右键，选择设置&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt text" src="/figures/vmware_sharefolder_01.png" /&gt;&lt;/p&gt;
&lt;p&gt;2: 然后如下图，点击选项，共享文件夹，一步步设置，这都没有问题&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt text" src="/figures/vmware_sharefolder_02.png" /&gt;&lt;/p&gt;
&lt;p&gt;完成上面的步骤以后，进入guest系统，/mnt/hgfs下面应该会出现要共享的文件夹。&lt;/p&gt;
&lt;p&gt;可是很傻B的是/mnt下面什么都没有。网上什么说法都有，试了好几个都没搞好。最后得到的解决办法是：&lt;strong&gt;重新安装 vmware-tools&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装 vmware-tools步骤&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1: 在guest系统（ubuntu）下面，点击虚拟机，然后点击 "安装 vmware tools"&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt text" src="/figures/vmware_sharefolder_03.png" /&gt; &lt;/p&gt;
&lt;p&gt;2: 这个时候的vmware tools在虚拟光驱下面，是tar.gz文件。需要解压。比如下图解压到Downloads/vmtool文件夹下面&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt text" src="/figures/vmware_sharefolder_04.png" /&gt; &lt;/p&gt;
&lt;p&gt;3: 还有一个办法就是把虚拟光驱加载到某个文件夹，比如下面把它加载到/mnt下面&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mount /dev/cdrom /mnt

cd /tmp

tar zxf /mnt/vmware-linux-tools.tar.gz

umount /mnt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4：假如在Downloads/vmtool下面，则进入vmware-tools-distrib文件夹，然后运行 &lt;strong&gt;./vmware-install.pl&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="alt text" src="/figures/vmware_sharefolder_05.png" /&gt; &lt;/p&gt;
&lt;p&gt;5: 一路点击下去，结束以后在查看/mnt/hgfs下面，终于可以看见需要的共享文件夹了。&lt;/p&gt;</summary><category term="linux"></category></entry><entry><title>sklearn evaluation model with scoring parameter and sklearn.metrics</title><link href="/pages/2015/09/04/sklearn-evaluation-model-with-scoring-parameter-and-sklearnmetrics/" rel="alternate"></link><updated>2015-09-04T00:00:00-05:00</updated><author><name>Huiming Song</name></author><id>tag:,2015-09-04:pages/2015/09/04/sklearn-evaluation-model-with-scoring-parameter-and-sklearnmetrics/</id><summary type="html">&lt;h2&gt;Sklearn Model Evaluation and Scoring Function&lt;/h2&gt;
&lt;p&gt;Table of Contents:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#summary_steps"&gt;Summary Steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#details"&gt;Details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#memos"&gt;Memos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name='summary_steps'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;sklearn通常有三种办法来评价模型的效果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;estimator score method: 很多作者开发的统计包子带有估计量的评价方法。&lt;/li&gt;
&lt;li&gt;scoring parameter： 比如在&lt;code&gt;crossing validation&lt;/code&gt;包里面（&lt;code&gt;cross_validation.cross_val_score, grid_search.GridSearchCV&lt;/code&gt;）有&lt;code&gt;scoring&lt;/code&gt;参数，你可以选择不同的score函数&lt;/li&gt;
&lt;li&gt;metric function： sklearn的metric包带有许多评价模型的函数。通常分为下面几种不同的大类：&lt;code&gt;Classification, MultiLabel ranking, Regression and Clustering&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这儿主要讨论第2种和第3种情况。&lt;/p&gt;
&lt;h4&gt;1. scoring parameter&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;使用&lt;code&gt;crossing validation&lt;/code&gt;包里面（&lt;code&gt;cross_validation.cross_val_score, grid_search.GridSearchCV&lt;/code&gt;）的&lt;code&gt;scoring&lt;/code&gt;参数。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;svm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cross_validation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datasets&lt;/span&gt;
&lt;span class="n"&gt;iris&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datasets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_iris&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iris&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iris&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;
&lt;span class="n"&gt;clf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;svm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SVC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gamma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cross_validation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cross_val_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scoring&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;accuracy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样可以得到5个cross validation的accuracy值。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用GridSearchVC里面的scoring参数&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.linear_model&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SGDClassifier&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.grid_search&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;GridSearchCV&lt;/span&gt;
&lt;span class="n"&gt;clf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SGDClassifier&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;penalty_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;l1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;l2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;loss_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hinge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;log&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;alpha_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;param_grid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;penalty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;penalty_params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loss_params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alpha_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cross_validation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;KFold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_folds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shuffle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9999&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GridSearchCV&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param_grid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;param_grid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_jobs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scoring&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;accuracy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid_scores_&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：上面使用GridSearch来搜索最优的参数组合。选择了两种不同的惩罚函数，L1是绝对值的和(Lasso),L2是平方和。loss function也是两个，alpha的值也选择了两个。cross validation选择了3个folder，也就是数据分成三组，每次两组用来做training data，一组用来做validation data. GridSearch因为使用了很多种组合，所以计算量会非常大。通常要运行很久才能有结果。&lt;/p&gt;
&lt;h4&gt;2. Metric Fcunction&lt;/h4&gt;
&lt;p&gt;主要是使用&lt;code&gt;sklearn.metircs&lt;/code&gt;里面的定义好的函数或者用&lt;code&gt;make_score&lt;/code&gt;来自定义函数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数以 _score 结尾的值越大说明模型越好&lt;/li&gt;
&lt;li&gt;函数以 _error 或者 _loss 结尾的值则越小越好. 当使用make_scorer来转换为score的时候, 需要把参数 greater_is_better 设置为 False (默认为True).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有些metrics不能在上面的scoring参数里面用，有时候是应为需要更多的参数，比如fbeta_score. 这时候可以用make_score来自定义score函数。&lt;/p&gt;
&lt;p&gt;一个典型的用法就是在metrics里面已有的函数上选择不同于默认值的值。比如下面在fbeta_score里面选择beta = 2.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.metrics&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;fbeta_score&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;make_scorer&lt;/span&gt;
&lt;span class="n"&gt;ftwo_scorer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_scorer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fbeta_score&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;beta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.grid_search&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;GridSearchCV&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.svm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LinearSVC&lt;/span&gt;
&lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GridSearchCV&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LinearSVC&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;param_grid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt; &lt;span class="n"&gt;scoring&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ftwo_scorer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另一种就是完全定义一个新的score函数.&lt;/p&gt;
&lt;h4&gt;3. 常见选择&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;f1_score: 又叫balanced F-Score，用于binary的响应值&lt;/li&gt;
&lt;li&gt;auc_roc_score：同样用于binary的响应值。当y=1的个数很少的时候，auc不是一个很好的度量值。&lt;/li&gt;
&lt;li&gt;accuracy_score：预测值等于真实值的百分比。很多的时候没有什么用，因为小概率事情都预测为0对accuracy没什么影响。&lt;/li&gt;
&lt;li&gt;consusion_matrix：预测值跟真实值的cross table. 可以看出预测效果，但是没有度量值。&lt;/li&gt;
&lt;li&gt;precision, recall 和 F-measures：&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;MultiClass / MultiLabel&lt;/h5&gt;
&lt;p&gt;对 multiclass 和 multilabel 分类问题, 可以对每个label分别应用precision, recall, 和 F-measures. &lt;/p&gt;
&lt;p&gt;对于不同的label，shangmi上面讨论过 average_precision_score (multilabel only), f1_score, fbeta_score, precision_recall_fscore_support, precision_score 和 recall_score functions可以用来处理多label的情况. 注意在multiclass的时候，“micro”-averaging会产生相等的 precision, recall and F, 但 “weighted” averaging 产生的 F-score 会在 precision 和 recall的值之间.&lt;/p&gt;
&lt;h5&gt;MultiLabel Ranking&lt;/h5&gt;
&lt;p&gt;In multilabel learning, each sample can have any number of ground truth labels associated with it. The goal is to give high scores and better rank to the ground truth labels.&lt;/p&gt;
&lt;p&gt;The coverage_error function computes the average number of labels that have to be included in the final prediction such that all true labels are predicted.&lt;/p&gt;
&lt;p&gt;The label_ranking_average_precision_score function implements label ranking average precision (LRAP). This metric is linked to the average_precision_score function, but is based on the notion of label ranking instead of precision and recall.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://scikit-learn.org/stable/modules/model_evaluation.html"&gt;Model evaluation: quantifying the quality of predictions&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="sklearn"></category></entry><entry><title>Static github pages with Pelican</title><link href="/pages/2015/08/01/static-github-pages-with-pelican/" rel="alternate"></link><updated>2015-08-01T00:00:00-05:00</updated><author><name>Huiming Song</name></author><id>tag:,2015-08-01:pages/2015/08/01/static-github-pages-with-pelican/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;安装 git, pelican, markdown, typogrify（增强排版）&lt;/li&gt;
&lt;li&gt;建立blog文件夹&lt;/li&gt;
&lt;li&gt;markdown / ipynb 的源文件放在./blog/content下面&lt;/li&gt;
&lt;li&gt;在blog下面运行 make html,如果要local查看，再运行make serve&lt;/li&gt;
&lt;li&gt;主题：在blog下面下载themes，然后到pelicanconf.py里面修改主题&lt;/li&gt;
&lt;li&gt;插件：在blog下面建立plugins文件夹，然后下载插件到这儿。然后到pelicanconf.py里面修改主题&lt;/li&gt;
&lt;li&gt;到./blog/output目录下面 push到github&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;重新设置&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把blog/content文件夹下面的文件拷出来备用&lt;/li&gt;
&lt;li&gt;删除blog文件夹&lt;/li&gt;
&lt;li&gt;到git上删除songhuiming.github.io这个repositary，在setting最下面可以删除&lt;/li&gt;
&lt;li&gt;重复上面的步骤&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;添加plugins&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;git clone plugins主题到./blog/pelican-plugins&lt;/li&gt;
&lt;li&gt;选择需要采用的plugins，新的plugins base不支持tag cloud，所以要自己添加，要不然那儿总是空白  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;怎么更改页面设计&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;更改页首的menu&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在pelicanconf.py里面更改menuitems，让它链接到你想要得页面。通常categories，archives这些都是模板自带的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;MENUITEMS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Categories&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/functions/categories.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Archives&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/functions/archives.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;About Me&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/functions/aboutMe.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;更改右边的sidebar&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需要到主题里面去修改(比如我选的gum主题)。进入pelican-themes/gum/template/sidebar.html，然后修改下面的（下面例子里面把原来的categories改为分类）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;分类&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;categories&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;null&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;categories&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;SITEURL&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;cat.url&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;e&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;cat&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Reference&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://pelican-docs-zh-cn.readthedocs.org/en/latest/"&gt;pelican官网翻译&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nafiulis.me/making-a-static-blog-with-pelican.html"&gt;一个实例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://farseerfc.me/zhs/redesign-pelican-theme.html"&gt;很漂亮的设计&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;</summary><category term="pelican"></category></entry></feed>